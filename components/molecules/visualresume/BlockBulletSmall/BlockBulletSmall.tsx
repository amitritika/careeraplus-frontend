/**
 * BlockBulletSmall - Consolidated TypeScript Component with FontFamily Support
 * 
 * Enhanced with React Icons, html-react-parser, and configurable fontFamily
 * 
 * @author Generated by React Component Consolidation System  
 * @version 2.1.0 - FontFamily Configuration Added
 */

import React, { useMemo } from 'react';
import parse from 'html-react-parser';
import { FaCheck, FaCircle } from 'react-icons/fa';

// Template configuration types
interface LineConfig {
  top: number;
  left: number;
  height?: number | string;
  width?: number;
  opacity?: boolean | string;
}

interface TemplateConfig {
  type: 'BASIC' | 'LINE' | 'CHECK_ICON' | 'CIRCLE_ICON';
  leftOffset: number;
  iconType: 'bullet' | 'line' | 'check' | 'circle';
  lineConfig?: LineConfig;
  secondaryFontSize?: number;
  useMainColor: boolean;
  IconComponent?: React.ComponentType<any>;
}

// Component props interface with fontFamily support
export interface BlockBulletSmallProps {
  /** Scaling factor for all dimensions */
  fac: number;
  /** Background/bullet color */
  bg: string;
  /** Font color */
  font: string;
  /** Font family for text rendering */
  fontFamily?: string;
  /** Unique component identifier */
  id: string;
  /** Template-specific properties */
  props: {
    /** Content height multiplier */
    height: number;
    /** HTML content to render */
    name: string;
    /** Vertical positioning offset */
    top: number;
    /** Line opacity flag (templates 2,3 only) */
    line?: boolean;
  };
  /** Template variant (1-5) */
  template?: 1 | 2 | 3 | 4 | 5;
}

// Calculations interface - includes all possible calculated values
interface CalculatedValues {
  // Base calculations (all templates)
  height: string;
  width: string;
  line: string;
  size: string;
  left: string;
  top: string;
  top1: string;
  height1: string;
  left1: string;

  // Template-specific calculations (optional)
  lineT?: string;
  lineL?: string;
  lineH?: string;
  lineW?: string;
  lineOp?: boolean;
  size1?: string;
}

// Template configurations with React Icons
const TEMPLATE_CONFIGS: Record<number, TemplateConfig> = {
  1: {
    type: 'BASIC',
    leftOffset: 17,
    iconType: 'bullet',
    useMainColor: false
  },
  2: {
    type: 'LINE',
    leftOffset: 17,
    iconType: 'line',
    lineConfig: { top: 6, left: -5, height: 'props.height', width: 0.5, opacity: 'props.line' },
    useMainColor: false
  },
  3: {
    type: 'CHECK_ICON',
    leftOffset: 17,
    iconType: 'check',
    lineConfig: { top: 0.5, left: -6 },
    secondaryFontSize: 2.5,
    useMainColor: false,
    IconComponent: FaCheck
  },
  4: {
    type: 'CHECK_ICON',
    leftOffset: 17,
    iconType: 'check',
    lineConfig: { top: 0.5, left: -6 },
    secondaryFontSize: 2.5,
    useMainColor: true,
    IconComponent: FaCheck
  },
  5: {
    type: 'CIRCLE_ICON',
    leftOffset: 8,
    iconType: 'circle',
    lineConfig: { top: 2, left: -2 },
    secondaryFontSize: 1,
    useMainColor: true,
    IconComponent: FaCircle
  }
};

/**
 * Helper function to calculate scaled pixel values
 * @param factor - Scaling factor
 * @param value - Base value to scale
 * @returns Scaled pixel string
 */
const scalePixels = (factor: number, value: number): string => {
  return `${factor * value}px`;
};

/**
 * Helper function to calculate scaled point values
 * @param factor - Scaling factor  
 * @param value - Base point value to scale
 * @returns Scaled point string
 */
const scalePoints = (factor: number, value: number): string => {
  return `${factor * value}pt`;
};

/**
 * BlockBulletSmall Component
 * 
 * Renders a configurable bullet point with optional icons, lines, and styling variations.
 * Uses React Icons, html-react-parser, and supports custom font families.
 * 
 * @param props - Component properties including fontFamily
 * @returns JSX element representing the styled bullet point
 */
export const BlockBulletSmall: React.FC<BlockBulletSmallProps> = ({
  fac,
  bg,
  font,
  fontFamily = 'calibri', // Default font family with fallback
  id,
  props: componentProps,
  template = 1
}) => {
  // Get template configuration
  const config = TEMPLATE_CONFIGS[template];

  if (!config) {
    console.warn(`Invalid template ${template}, falling back to template 1`);
    const fallbackTemplate = 1;

    // Use fallback config for rendering
    return (
      <BlockBulletSmall
        fac={fac}
        bg={bg}
        font={font}
        fontFamily={fontFamily}
        id={id}
        props={componentProps}
        template={fallbackTemplate}
      />
    );
  }

  // Memoize calculated dimensions and positions with proper typing
  const calculations = useMemo((): CalculatedValues => {
    const baseCalcs: CalculatedValues = {
      height: scalePixels(fac, componentProps.height),
      width: scalePixels(fac, 183), // Fixed width
      line: scalePixels(fac, componentProps.height), // Line height matches content height
      size: scalePoints(fac, 3.2), // Main font size
      left: scalePixels(fac, config.leftOffset),
      top: scalePixels(fac, componentProps.top),
      // Bullet point positioning
      top1: scalePixels(fac, 3),
      height1: scalePixels(fac, 2),
      left1: scalePixels(fac, -5.5)
    };

    // Add template-specific calculations
    if (config.lineConfig) {
      const lineConf = config.lineConfig;

      // Handle line positioning
      if (typeof lineConf.top === 'number') {
        baseCalcs.lineT = scalePixels(fac, lineConf.top);
      }
      if (typeof lineConf.left === 'number') {
        baseCalcs.lineL = scalePixels(fac, lineConf.left);
      }

      // Handle line dimensions for LINE type
      if (config.type === 'LINE') {
        if (lineConf.height === 'props.height') {
          baseCalcs.lineH = scalePixels(fac, componentProps.height);
        } else if (typeof lineConf.height === 'number') {
          baseCalcs.lineH = scalePixels(fac, lineConf.height);
        }

        if (typeof lineConf.width === 'number') {
          baseCalcs.lineW = scalePixels(fac, lineConf.width);
        }

        baseCalcs.lineOp = componentProps.line; // Line opacity
      }

      // Handle secondary font size for icon types
      if (config.secondaryFontSize) {
        baseCalcs.size1 = scalePoints(fac, config.secondaryFontSize);
      }
    }

    return baseCalcs;
  }, [fac, componentProps, config]);

  // Memoize main container styles with configurable fontFamily
  const containerStyle = useMemo(() => ({
    height: calculations.height,
    width: calculations.width,
    position: 'absolute' as const,
    top: calculations.top,
    left: calculations.left,
    color: config.useMainColor ? bg : font,
    fontFamily: fontFamily, // Configurable font family
    fontSize: calculations.size,
    textAlign: 'left' as const
  }), [calculations, config.useMainColor, bg, font, fontFamily]);

  // Memoize bullet point styles (Template 1 & 2)
  const bulletStyle = useMemo(() => ({
    top: calculations.top1,
    position: 'absolute' as const,
    height: calculations.height1,
    width: calculations.height1,
    borderRadius: '50%',
    backgroundColor: bg,
    left: calculations.left1
  }), [calculations, bg]);

  // Memoize line styles (Template 2 only)
  const lineStyle = useMemo(() => {
    if (config.type !== 'LINE' || !calculations.lineW || !calculations.lineH || !calculations.lineT || !calculations.lineL) {
      return {};
    }

    return {
      width: calculations.lineW,
      height: calculations.lineH,
      backgroundColor: bg,
      position: 'absolute' as const,
      top: calculations.lineT,
      left: calculations.lineL
    };
  }, [config.type, calculations, bg]);

  // Memoize icon styles (Templates 3, 4, 5) - React Icons
  const iconStyle = useMemo(() => {
    if (!config.lineConfig || !config.secondaryFontSize || !calculations.size1 || !calculations.lineT || !calculations.lineL) {
      return {};
    }

    return {
      position: 'absolute' as const,
      color: config.useMainColor ? bg : font,
      fontSize: calculations.size1,
      top: calculations.lineT,
      left: calculations.lineL,
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center'
    };
  }, [config, calculations, bg, font]);

  // Memoize parsed content using html-react-parser
  const parsedContent = useMemo(() => {
    try {
      return parse(componentProps.name);
    } catch (error) {
      console.warn('Error parsing HTML content:', error);
      return componentProps.name; // Fallback to plain text
    }
  }, [componentProps.name]);

  // Render content based on template type
  const renderContent = () => {
    const { IconComponent } = config;

    switch (config.type) {
      case 'BASIC':
        return (
          <>
            <div style={bulletStyle}></div>
            <div>{parsedContent}</div>
          </>
        );

      case 'LINE':
        return (
          <>
            <div style={bulletStyle}></div>
            <div>{parsedContent}</div>
            {calculations.lineOp && <div style={lineStyle}></div>}
          </>
        );

      case 'CHECK_ICON':
        return (
          <>
            <div>{parsedContent}</div>
            <div style={iconStyle}>
              {IconComponent ? <IconComponent /> : <FaCheck />}
            </div>
          </>
        );

      case 'CIRCLE_ICON':
        return (
          <>
            <div>{parsedContent}</div>
            <div style={iconStyle}>
              {IconComponent ? <IconComponent /> : <FaCircle />}
            </div>
          </>
        );

      default:
        return <div>{parsedContent}</div>;
    }
  };

  return (
    <div id={id} style={containerStyle}>
      {renderContent()}
    </div>
  );
};

export default BlockBulletSmall;
